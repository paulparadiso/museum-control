{"version":3,"sources":["Contexts/UserContext.js","GraphqlQueries.js","Components/Widgets/ButtonSet.js","Components/Widgets/ControlButtons.js","utils.js","Components/Widgets/ShowOnOffControl.js","Components/Widgets/MuteOnOffControl.js","Components/Widgets/DeviceStatusView.js","Components/Widgets/DailySchedulerView.js","App.js","reportWebVitals.js","index.js","Topics.js"],"names":["UserContext","createContext","SEND_MQTT_MESSAGE","gql","_templateObject","Object","taggedTemplateLiteral","_templateObject2","_templateObject3","_templateObject4","GET_MQTT_MESSAGE","_templateObject5","GET_CURRENT_USER","_templateObject6","useStyles","makeStyles","root","maxWidth","margin","textAlign","buttonContainer","width","left","float","buttons","right","ButtonSet","props","classes","_useMutation","useMutation","sendMQTTMessage","slicedToArray","react_default","a","createElement","Fragment","label","items","map","item","index","Button","variant","color","key","concat","className","onClick","message","variables","topic","toUpperCase","marginTop","ControlButtons","permissions","currentUser","useContext","includes","validateUser","cjs_default","Card","CardContent","Widgets_ButtonSet","ShowOnOffControl","Widgets_ControlButtons","MUSEUM_SHOW_STATUS","MuteOnOff","MUSEUM_SHOW_MUTE","minWidth","header","marginBottom","bullet","display","transform","icon","title","fontSize","console","height","backgroundColor","overflow","deviceIcon","marginLeft","consoleLine","paddingTop","paddingBottom","pos","DeviceStatusView","statusList","_useState","useState","_useState2","statuses","setStatuses","data","useQuery","MQTT_SHOW_DEVICES_STATUS","pollInterval","onCompleted","updateStatuses","incomingMessage","JSON","parse","getMQTTMessage","i","length","name","status","toConsumableArray","s","ListItem","Brightness1Rounded_default","style","List","DailySchedulerView","changedOnTime","changedOffTime","schedulerData","setSchedulerData","_useQuery","loading","error","setOnOffTimes","FormGroup","FormControlLabel","control","Switch","size","checked","enabled","onChange","schedulerState","onSubmit","e","preventDefault","onTime","offTime","FormControl","InputLabel","htmlFor","Input","id","aria-describedby","target","value","FormHelperText","type","App","err","Contexts_UserContext","Provider","Widgets_ShowOnOffControl","MuteOnOffControl","Widgets_DeviceStatusView","Widgets_DailySchedulerView","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","apolloClient","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","ApolloProvider","client","src_App","document","getElementById","module","exports","MQTT_SHOW_STATE_TOPIC","MQTT_SHOW_TOWER_STATE_TOPIC","MQTT_SHOW_ROTUNDA_STATE_TOPIC","MQTT_SHOW_FULLSCREEN_TOPIC","MQTT_SHOW_SCHEDULE_SET_TIME","MQTT_SHOW_SCHEDULER_SET_STATE","MQTT_SHOW_MUTE","MQTT_SHOW_TOWER_MUTE","MQTT_SHOW_ROTUNDA_MUTE","MQTT_CUE_TOPIC","MQTT_APP_PARAMS_SET","MQTT_APP_PARAMS_CURRENT"],"mappings":"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","file":"static/js/main.f022d384.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst UserContext = createContext('');\n\nexport default UserContext;","import { gql } from '@apollo/client';\n\nexport const GET_ONOFF_TIMES = gql`\n    query GetTimes {\n        times {\n            onTime\n            offTime\n        }\n    }\n    `;\n\nexport const SET_ONOFF_TIMES = gql`\n    mutation SetTimes($onTime: String, $offTime: String) {\n        setTimes(onTime: $onTime, offTime: $offTime) {\n            onTime\n            offTime\n        }\n    }\n    `\n\nexport const GET_DEVICE_STATUSES = gql`\n    query GetDeviceStatuses {\n        getDeviceStatuses {\n            name\n            status\n        }\n    }\n    `\n\nexport const SEND_MQTT_MESSAGE = gql`\n    mutation SendMQTTMessage ($topic: String!, $message: String!) {\n        sendMQTTMessage(topic: $topic, message: $message) \n    }\n`\n\nexport const GET_MQTT_MESSAGE = gql`\n    query GetMQTTMessage ($topic: String!) {\n\t    getMQTTMessage(topic: $topic) \n    }\t\n    `\n\nexport const GET_CURRENT_USER = gql`\n    query GetCurrentUser {\n        getCurrentUser\n    }\n`","import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core';\nimport { useMutation } from '@apollo/client';\nimport { SEND_MQTT_MESSAGE } from '../../GraphqlQueries';\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 325,\n        margin: 10,\n        textAlign: 'center',\n    },\n    buttonContainer: {\n        width: '57vw',\n        textAlign: 'right'\n    },\n    left: {\n        width: '45%',\n        float: 'left',\n    },\n    buttons: {\n        margin: 10,\n    },\n    right: {\n        width: '45%',\n        float: 'right'\n    }\n});\n\nconst ButtonSet = props => {\n\n    const classes = useStyles();\n    const [sendMQTTMessage] = useMutation(SEND_MQTT_MESSAGE);\n\n    const mutateMQTT = (message) => {\n        sendMQTTMessage({\n            'variables': {\n                'topic': props.topic,\n                'message': message\n            }\n        })\n    }\n\n    return (\n        <React.Fragment>\n            {props.label}\n            {\n                props.items.map((item, index) => {\n                    return (\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            key={`button-${index}`}\n                            className={classes.buttons}\n                            onClick={() => mutateMQTT(item)}\n                        >\n                            {item.toUpperCase()}\n                        </Button>\n                    )\n                })\n            }\n        </React.Fragment>\n    )\n\n}\n\nexport default ButtonSet;","import React, { useContext } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core';\nimport ButtonSet from './ButtonSet'\nimport Draggable from 'react-draggable';\nimport { validateUser } from '../../utils';\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 325,\n        marginTop: 10,\n        textAlign: 'center',\n        float: 'left'\n    }\n})\n\nconst ControlButtons = props => {\n\n    const classes = useStyles();\n\n    if(!validateUser(props.permissions)) {\n        return <></>\n    }\n\n    return (\n        <Draggable>\n            <Card\n                variant=\"outlined\"\n                className={classes.root}\n            >\n                <CardContent>\n                    <ButtonSet\n                        label={props.label}\n                        items={props.items}\n                        topic={props.topic}\n                    />\n                </CardContent>\n            </Card>\n        </Draggable>\n    )\n}\n\nexport default ControlButtons;","import { useContext } from 'react';\nimport UserContext from './Contexts/UserContext';\n\nexport const validateUser = permissions => {\n\n    const currentUser = useContext(UserContext);\n    if(permissions === [] || permissions === null || currentUser === 'all' || permissions.includes(currentUser)) {\n        return true;\n    }\n    return false;\n\n}","import React from 'react';\nimport ControlButtons from './ControlButtons';\nimport { MUSEUM_SHOW_STATUS } from '../../Topics'\n\nconst ShowOnOffControl = props => {\n\n    return (\n        <ControlButtons\n            label=\"Show On/Off\"\n            items={['on', 'off']}\n            topic={MUSEUM_SHOW_STATUS}\n            permissions={['admin']}\n        />\n    )\n}\n\nexport default ShowOnOffControl;","import React from 'react';\nimport ControlButtons from './ControlButtons';\nimport { MUSEUM_SHOW_MUTE } from '../../Topics';\n\nconst MuteOnOff = props => {\n\n    return (\n        <ControlButtons\n            label=\"Mute On/Off\"\n            items={['on', 'off']}\n            topic={MUSEUM_SHOW_MUTE}\n            permissions={['all']}\n        />\n    )\n}\n\nexport default MuteOnOff;","import React, { useState } from 'react';\nimport {\n    List,\n    ListItem,\n} from '@material-ui/core';\nimport Brightness1RoundedIcon from '@material-ui/icons/Brightness1Rounded'\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useQuery } from '@apollo/client';\nimport { GET_MQTT_MESSAGE } from '../../GraphqlQueries';\nimport Draggable from 'react-draggable';\nimport { MQTT_SHOW_DEVICES_STATUS } from '../../Topics';\n\nconst useStyles = makeStyles({\n    root: {\n        minWidth: 700,\n        marginTop: 10,\n        textAlign: 'center',\n        float: 'left'\n    },\n    header: {\n        width: '100%',\n        marginBottom: 20,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.0)',\n    },\n    buttons: {\n        margin: 10,\n    },\n    icon: {\n        margin: 0\n    },\n    title: {\n        fontSize: 14,\n        width: '50%',\n    },\n    console: {\n        height: 400,\n        backgroundColor: 'black',\n        color: 'green',\n        overflow: 'auto',\n    },\n    deviceIcon: {\n        marginLeft: 10,\n    },\n    consoleLine: {\n        margin: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n    pos: {\n        marginBottom: 23,\n    },\n});\n\nconst DeviceStatusView = props => {\n\n    let statusList;\n\n    const classes = useStyles();\n    const [statuses, setStatuses] = useState([]);\n    const { data } = useQuery(GET_MQTT_MESSAGE,\n        {\n            variables: { 'topic': MQTT_SHOW_DEVICES_STATUS },\n            pollInterval: 500, onCompleted: () => updateStatuses()\n        });\n\n    const updateStatuses = () => {\n        const incomingMessage = JSON.parse(data.getMQTTMessage)\n        \n        for (let i = 0; i < statuses.length; i++) {\n            if (statuses[i].name === incomingMessage.name) {\n                statuses[i].status = incomingMessage.status;\n                setStatuses([...statuses]);\n                return;\n            }\n        }\n        setStatuses([...statuses, JSON.parse(data.getMQTTMessage)]);\n    }\n\n    statusList = statuses.map((s, i) => {\n        if(s === null) return [];\n        const color = s.status === 'true' ? 'green' : 'red';\n        return (\n            <ListItem >\n                {s.name}\n                <Brightness1RoundedIcon\n                    className={classes.deviceIcon}\n                    style={{ color: color }}\n                />\n            </ListItem>\n        );\n    });\n\n    return (\n        <Draggable>\n            <Card\n                variant=\"outlined\"\n                className={classes.root}\n            >\n                <CardContent>\n                    <List>\n                        {statusList}\n                    </List>\n                </CardContent>\n            </Card>\n        </Draggable>\n    )\n}\n\nexport default DeviceStatusView;","import React, { useState } from 'react';\nimport {\n    FormControl,\n    FormGroup,\n    FormControlLabel,\n    Switch,\n    InputLabel,\n    Input,\n    FormHelperText,\n    Button\n} from '@material-ui/core';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Draggable from 'react-draggable';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { GET_MQTT_MESSAGE, SEND_MQTT_MESSAGE } from '../../GraphqlQueries';\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 325,\n        margin: 'auto',\n        marginTop: 10,\n        textAlign: 'center',\n    },\n    header: {\n        width: '100%',\n        marginBottom: 20,\n    },\n    bullet: {\n        display: 'inline-block',\n        margin: '0 2px',\n        transform: 'scale(0.0)',\n    },\n    buttons: {\n        margin: 10,\n    },\n    icon: {\n        margin: 0\n    },\n    title: {\n        fontSize: 14,\n        width: '50%',\n    },\n    console: {\n        height: 400,\n        backgroundColor: 'black',\n        color: 'green',\n        overflow: 'auto',\n    },\n    consoleLine: {\n        margin: 0,\n        paddingTop: 0,\n        paddingBottom: 0,\n    },\n    pos: {\n        marginBottom: 23,\n    },\n});\n\nconst DailySchedulerView = props => {\n\n    const classes = useStyles();\n\n    let changedOnTime = null;\n    let changedOffTime = null;\n    const [schedulerData, setSchedulerData] = useState({})\n\n    const { loading, error, data } = useQuery(GET_MQTT_MESSAGE, \n                                                {'variables': {'topic': 'museum/apps/dailyscheduler/params/current'}, \n                                                 'pollInterval': 1000,\n                                                 'onCompleted': data => {\n                                                    setSchedulerData(JSON.parse(data.getMQTTMessage));\n                                                }});\n    \n    const [setOnOffTimes] = useMutation(SEND_MQTT_MESSAGE);\n    const mutateTimes = () => {\n        setOnOffTimes({\n            'variables': {\n                'onTime': changedOnTime === null ? schedulerData.onTime : changedOnTime,\n                'offTime': changedOffTime === null ? schedulerData.offTime : changedOffTime,\n                'enabled': schedulerData.enabled\n            }\n        });\n    }\n\n    const toggleSchedulerEnabled = () => {\n        if(schedulerData.enabled === 'true') {\n            schedulerData.enabled = 'false';\n        } else {\n            schedulerData.enabled = 'true';\n        }\n    }\n\n    if(loading) return <></>;\n\n    return (\n        <Draggable>\n            <Card\n                variant=\"outlined\"\n                className={classes.root}\n            >\n                <CardContent>\n                    <FormGroup>\n                        <FormControlLabel\n                            control={<Switch size=\"small\" checked={schedulerData.enabled === 'true'} onChange={() => toggleSchedulerEnabled()} />}\n                            label={props.schedulerState ? 'Turn Scheduler Off' : 'Turn Scheduler On'}\n                        >\n                        </FormControlLabel>\n                    </FormGroup>\n                    <form onSubmit={e => {\n                        e.preventDefault();\n                        mutateTimes();\n                    }}\n                    >\n                        <FormControl>\n                            <InputLabel htmlFor=\"on\">{schedulerData.onTime}</InputLabel>\n                            <Input id=\"on\" aria-describedby=\"on-text\" onChange={e => changedOnTime = e.target.value} />\n                            <FormHelperText id=\"on-text\">Change show on time.</FormHelperText>\n                        </FormControl>\n                        <br />\n                        <FormControl>\n                            <InputLabel htmlFor=\"off\">{schedulerData.offTime}</InputLabel>\n                            <Input id=\"off\" aria-describedby=\"off-text\" onChange={e => changedOffTime = e.target.value} />\n                            <FormHelperText id=\"off-text\">Change show off time.</FormHelperText>\n                        </FormControl>\n                        <br />\n                        <Button className={classes.buttons} variant=\"contained\" type=\"submit\">Submit</Button>\n                    </form>\n                </CardContent>\n            </Card>\n        </Draggable>\n    )\n}\n\nexport default DailySchedulerView;","import React from 'react';\nimport './App.css';\nimport UserContext from './Contexts/UserContext';\nimport { useQuery } from '@apollo/client';\nimport { GET_CURRENT_USER } from './GraphqlQueries';\nimport ShowOnOffControl from './Components/Widgets/ShowOnOffControl';\nimport MuteOnOffControl from './Components/Widgets/MuteOnOffControl';\nimport DeviceStatusView from './Components/Widgets/DeviceStatusView';\nimport DailySchedulerView from './Components/Widgets/DailySchedulerView';\n\nfunction App() {\n\n  const { loading, err, data } = useQuery(GET_CURRENT_USER);\n\n  if(loading) return <></>\n\n  return (\n    <UserContext.Provider value='admin'>\n      <ShowOnOffControl/>\n      <MuteOnOffControl/>\n      <DeviceStatusView/>\n      <DailySchedulerView/>\n    </UserContext.Provider>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst apolloClient = new ApolloClient({\n  uri: `http://localhost:3001/graphql`,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={apolloClient}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\n    'MQTT_SHOW_STATE_TOPIC': 'museum/show/status',\n    'MQTT_SHOW_TOWER_STATE_TOPIC': 'museum/show/tower/status',\n    'MQTT_SHOW_ROTUNDA_STATE_TOPIC': 'museum/show/rotunda/status',\n    'MQTT_SHOW_FULLSCREEN_TOPIC': 'museum/show/fullscreen',\n    'MQTT_SHOW_SCHEDULE_SET_TIME': 'museum/show/scheduler/time/set',\n    'MQTT_SHOW_DEVICES_STATUS': 'museum/show/devices/status',\n    'MQTT_SHOW_SCHEDULER_SET_STATE': \"museum/show/scheduler/state\",\n    'MQTT_SHOW_MUTE': 'museum/show/security/mute',\n    'MQTT_SHOW_TOWER_MUTE': 'museum/show/tower/audio/mute',\n    'MQTT_SHOW_ROTUNDA_MUTE': 'museum/show/rotunda/audio/mute',\n    'MQTT_CUE_TOPIC': 'museum/show/video/cue',\n    'MQTT_APP_PARAMS_SET': 'museum/apps/<appname>/params/set',\n    'MQTT_APP_PARAMS_CURRENT': 'museum/apps/<appname>/params/current',\n}\n\n"],"sourceRoot":""}